// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview Predicts the likelihood of subscription renewal based on reseller notes.
 *
 * - predictRenewalLikelihood - A function that predicts the renewal likelihood.
 * - PredictRenewalLikelihoodInput - The input type for the predictRenewalLikelihood function.
 * - PredictRenewalLikelihoodOutput - The return type for the predictRenewalLikelihood function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const PredictRenewalLikelihoodInputSchema = z.object({
  notes: z
    .string()
    .describe('Reseller notes about the customer subscription.'),
});
export type PredictRenewalLikelihoodInput = z.infer<
  typeof PredictRenewalLikelihoodInputSchema
>;

const PredictRenewalLikelihoodOutputSchema = z.object({
  likelihood: z
    .number()
    .describe(
      'The predicted likelihood of renewal, on a scale of 0 to 1, where 0 is least likely and 1 is most likely.'
    ),
  reason: z
    .string()
    .describe(
      'The reasoning behind the predicted likelihood of renewal.'
    ),
});
export type PredictRenewalLikelihoodOutput = z.infer<
  typeof PredictRenewalLikelihoodOutputSchema
>;

export async function predictRenewalLikelihood(
  input: PredictRenewalLikelihoodInput
): Promise<PredictRenewalLikelihoodOutput> {
  return predictRenewalLikelihoodFlow(input);
}

const prompt = ai.definePrompt({
  name: 'predictRenewalLikelihoodPrompt',
  input: {schema: PredictRenewalLikelihoodInputSchema},
  output: {schema: PredictRenewalLikelihoodOutputSchema},
  prompt: `You are an expert subscription renewal prediction AI.

You will be provided with notes from a reseller about a customer's subscription.
Based on these notes, you will predict the likelihood of renewal on a scale of 0 to 1, where 0 is least likely and 1 is most likely.
You will also provide a brief explanation for your prediction.

Reseller Notes: {{{notes}}}

Likelihood (0-1): 
Reason: `,
});

const predictRenewalLikelihoodFlow = ai.defineFlow(
  {
    name: 'predictRenewalLikelihoodFlow',
    inputSchema: PredictRenewalLikelihoodInputSchema,
    outputSchema: PredictRenewalLikelihoodOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
